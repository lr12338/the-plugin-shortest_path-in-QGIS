# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ShortestPath
                                 A QGIS plugin
 最短路径并行计算
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-03-09
        git sha              : $Format:%H$
        copyright            : (C) 2022 by lurui
        email                : lr2570045758@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import *
# Initialize Qt resources from file resources.py
# from shortestpath_obj import Link
from .resources import *
# Import the code for the dialog
from multiprocessing.dummy import Pool as ThreadPool
from .shortest_path_dialog import ShortestPathDialog
import os.path
#引用1
# -*- coding: utf-8 -*-
import sys

sys.path.append("D:\其他工作\21年谢老师助教工作\QGIS代码\QGIS_python_最短路")
import time

from PyQt5.QtCore import QVariant
from qgis.core import *
from .shortestpath_obj import read_shpFile, SPP_LC, SPP_LS, SPP_CA

##################################
# 设置文件名称
##################################
Node_filename = "ChicagoSketch-ex1_nod_s"  # ChicagoSketch-ex1_nod_s , sf-ex1_nod_s
Link_filename = "ChicagoSketch-ex1_lnk_s"  # ChicagoSketch-ex1_lnk_s , sf-ex1_lnk_s
##################################
# 调用函数
##################################
LINK, NODE, NODE_COUNT, LINK_COUNT = read_shpFile(Node_filename, Link_filename)


def get_length(Astarsp):
    sum_length = 0
    for i in Astarsp:
        sum_length += i.length
    print('length = ', sum_length)


# test the lable correcting algorithm
def Test_SPP_LC(o_id, d_id):
    Lc_node = []
    shortestpath_p_list = SPP_LC(o_id, NODE)
    if shortestpath_p_list[o_id] == -1:
        pass
    else:
        print('shortestpath_p_list is wrong!')
    shortestpath_link = []
    head_n = NODE[d_id]
    Lc_node.append(d_id)
    tail_n = shortestpath_p_list[d_id]
    while tail_n != -1:
        for l in head_n.l_in:
            if l.tail_node == tail_n.node_id:
                shortestpath_link.insert(0, l)
        head_n = tail_n
        Lc_node.append(tail_n.node_id)
        tail_n = shortestpath_p_list[head_n.node_id]
    Lc_node.reverse()
    print( Lc_node)
    return (shortestpath_link, Lc_node)
def Test_SPP_LS(o_id, d_id):
    spath, snode = SPP_LS(o_id,d_id,NODE)
    print(snode)
    return(spath, snode)
def Test_SPP_LC_1(o_id,d_id):
    Lc_node = []
    shortestpath_p_list = SPP_LC(o_id,NODE)
    if shortestpath_p_list[o_id] == -1:
        pass
    else:
        print('shortestpath_p_list is wrong!')
    shortestpath_link=[]
    head_n = NODE[d_id]
    Lc_node.append(d_id)
    tail_n = shortestpath_p_list[d_id]
    while tail_n != -1:
        for l in head_n.l_in:
            if l.tail_node == tail_n.node_id:
                shortestpath_link.insert(0,l)
        head_n = tail_n
        Lc_node.append(tail_n.node_id)
        tail_n = shortestpath_p_list[head_n.node_id]
    Lc_node.reverse()
#    print(Lc_node)
    return (shortestpath_link,Lc_node)

##################################
# 创建结果的shp文件
##################################
def writeShp1(splink1, spnode1):
    # create fields
    layerFields = QgsFields()
    layerFields.append(QgsField('id', QVariant.Int))
    layerFields.append(QgsField('tail', QVariant.Int))
    layerFields.append(QgsField('head', QVariant.Int))
    # define the file path for the new shapefile
    addr = 'C:\\Qgis\\test-plugin\\shortest_path\\shortest_path_shp'
    #'C:\\Users\\25700\Desktop\\shp' # 当前目录
    writer = QgsVectorFileWriter(addr+'\\shortest path(LC)-1.shp', 'UTF-8', layerFields, \
                                 QgsWkbTypes.LineString, QgsCoordinateReferenceSystem('EPSG:4326'), 'ESRI Shapefile')
    # create features
    count = 0
    for link in splink1:
        count = count + 1
        # create an empty feature
        feat = QgsFeature()
        # Creates a new LineString geometry from a list of QgsPoint points.
        tailnode = QgsPoint(NODE[link.tail_node].X, NODE[link.tail_node].Y)
        headnode = QgsPoint(NODE[link.head_node].X, NODE[link.head_node].Y)
        feat.setGeometry(QgsGeometry.fromPolyline([tailnode, headnode]))
        # set the attribute values
        feat.setAttributes([count, link.tail_node - 1, link.head_node - 1])
        # add the feature to the layer
        writer.addFeature(feat)
    del (writer)
    return "Success for creating shpfile-1！"
def writeShp2(splink2, spnode2):
    # create fields
    layerFields = QgsFields()
    layerFields.append(QgsField('id', QVariant.Int))
    layerFields.append(QgsField('tail', QVariant.Int))
    layerFields.append(QgsField('head', QVariant.Int))
    # define the file path for the new shapefile
    addr ='C:\\Qgis\\test-plugin\\shortest_path\\shortest_path_shp'
        #'C:\\Users\\25700\Desktop\\shp' # 当前目录
    writer = QgsVectorFileWriter(addr+'\\shortest path(LC)-2.shp', 'UTF-8', layerFields, \
                                 QgsWkbTypes.LineString, QgsCoordinateReferenceSystem('EPSG:4326'), 'ESRI Shapefile')
    # create features
    count = 0
    for link in splink2:
        count = count + 1
        # create an empty feature
        feat = QgsFeature()
        # Creates a new LineString geometry from a list of QgsPoint points.
        tailnode = QgsPoint(NODE[link.tail_node].X, NODE[link.tail_node].Y)
        headnode = QgsPoint(NODE[link.head_node].X, NODE[link.head_node].Y)
        feat.setGeometry(QgsGeometry.fromPolyline([tailnode, headnode]))
        # set the attribute values
        feat.setAttributes([count, link.tail_node - 1, link.head_node - 1])
        # add the feature to the layer
        writer.addFeature(feat)
    del (writer)
    return "Success for creating shpfile-2！"
def writeShp3(splink3, spnode3):
    # create fields
    layerFields = QgsFields()
    layerFields.append(QgsField('id', QVariant.Int))
    layerFields.append(QgsField('tail', QVariant.Int))
    layerFields.append(QgsField('head', QVariant.Int))
    # define the file path for the new shapefile
    addr ='C:\\Qgis\\test-plugin\\shortest_path\\shortest_path_shp'
        #'C:\\Users\\25700\Desktop\\shp' # 当前目录
    writer = QgsVectorFileWriter(addr+'\\shortest path(LC)-3.shp', 'UTF-8', layerFields, \
                                 QgsWkbTypes.LineString, QgsCoordinateReferenceSystem('EPSG:4326'), 'ESRI Shapefile')
    # create features
    count = 0
    for link in splink3:
        count = count + 1
        # create an empty feature
        feat = QgsFeature()
        # Creates a new LineString geometry from a list of QgsPoint points.
        tailnode = QgsPoint(NODE[link.tail_node].X, NODE[link.tail_node].Y)
        headnode = QgsPoint(NODE[link.head_node].X, NODE[link.head_node].Y)
        feat.setGeometry(QgsGeometry.fromPolyline([tailnode, headnode]))
        # set the attribute values
        feat.setAttributes([count, link.tail_node - 1, link.head_node - 1])
        # add the feature to the layer
        writer.addFeature(feat)
    del (writer)
    return "Success for creating shpfile-3！"
#ls路径生成
def writeShp4(splink4, spnode4):
    # create fields
    layerFields = QgsFields()
    layerFields.append(QgsField('id', QVariant.Int))
    layerFields.append(QgsField('tail', QVariant.Int))
    layerFields.append(QgsField('head', QVariant.Int))
    # define the file path for the new shapefile
    addr ='C:\\Qgis\\test-plugin\\shortest_path\\shortest_path_shp'
        #'C:\\Users\\25700\Desktop\\shp' # 当前目录
    writer = QgsVectorFileWriter(addr+'\\shortest path(LS)-1.shp', 'UTF-8', layerFields, \
                                 QgsWkbTypes.LineString, QgsCoordinateReferenceSystem('EPSG:4326'), 'ESRI Shapefile')
    # create features
    count = 0
    for link in splink4:
        count = count + 1
        # create an empty feature
        feat = QgsFeature()
        # Creates a new LineString geometry from a list of QgsPoint points.
        tailnode = QgsPoint(NODE[link.tail_node].X, NODE[link.tail_node].Y)
        headnode = QgsPoint(NODE[link.head_node].X, NODE[link.head_node].Y)
        feat.setGeometry(QgsGeometry.fromPolyline([tailnode, headnode]))
        # set the attribute values
        feat.setAttributes([count, link.tail_node - 1, link.head_node - 1])
        # add the feature to the layer
        writer.addFeature(feat)
    del (writer)
    return "Success for creating shpfile-1！"
def writeShp5(splink5, spnode5):
    # create fields
    layerFields = QgsFields()
    layerFields.append(QgsField('id', QVariant.Int))
    layerFields.append(QgsField('tail', QVariant.Int))
    layerFields.append(QgsField('head', QVariant.Int))
    # define the file path for the new shapefile
    addr ='C:\\Qgis\\test-plugin\\shortest_path\\shortest_path_shp'
        #'C:\\Users\\25700\Desktop\\shp' # 当前目录
    writer = QgsVectorFileWriter(addr+'\\shortest path(LS)-2.shp', 'UTF-8', layerFields, \
                                 QgsWkbTypes.LineString, QgsCoordinateReferenceSystem('EPSG:4326'), 'ESRI Shapefile')
    # create features
    count = 0
    for link in splink5:
        count = count + 1
        # create an empty feature
        feat = QgsFeature()
        # Creates a new LineString geometry from a list of QgsPoint points.
        tailnode = QgsPoint(NODE[link.tail_node].X, NODE[link.tail_node].Y)
        headnode = QgsPoint(NODE[link.head_node].X, NODE[link.head_node].Y)
        feat.setGeometry(QgsGeometry.fromPolyline([tailnode, headnode]))
        # set the attribute values
        feat.setAttributes([count, link.tail_node - 1, link.head_node - 1])
        # add the feature to the layer
        writer.addFeature(feat)
    del (writer)
    return "Success for creating shpfile-2！"
def writeShp6(splink6, spnode6):
    # create fields
    layerFields = QgsFields()
    layerFields.append(QgsField('id', QVariant.Int))
    layerFields.append(QgsField('tail', QVariant.Int))
    layerFields.append(QgsField('head', QVariant.Int))
    # define the file path for the new shapefile
    addr ='C:\\Qgis\\test-plugin\\shortest_path\\shortest_path_shp'
        #'C:\\Users\\25700\Desktop\\shp' # 当前目录
    writer = QgsVectorFileWriter(addr+'\\shortest path(LS)-3.shp', 'UTF-8', layerFields, \
                                 QgsWkbTypes.LineString, QgsCoordinateReferenceSystem('EPSG:4326'), 'ESRI Shapefile')
    # create features
    count = 0
    for link in splink6:
        count = count + 1
        # create an empty feature
        feat = QgsFeature()
        # Creates a new LineString geometry from a list of QgsPoint points.
        tailnode = QgsPoint(NODE[link.tail_node].X, NODE[link.tail_node].Y)
        headnode = QgsPoint(NODE[link.head_node].X, NODE[link.head_node].Y)
        feat.setGeometry(QgsGeometry.fromPolyline([tailnode, headnode]))
        # set the attribute values
        feat.setAttributes([count, link.tail_node - 1, link.head_node - 1])
        # add the feature to the layer
        writer.addFeature(feat)
    del (writer)
    return "Success for creating shpfile-3！"
def Pr(Y):
    get_length(Y)

###
#引用1
class ShortestPath:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ShortestPath_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Shortest path')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ShortestPath', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action




    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/shortest_path/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Shortest path'),
                action)
            self.iface.removeToolBarIcon(action)
#

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = ShortestPathDialog()
            self.dlg.pbStart.clicked.connect(self.result)
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
      #  result = self.dlg.exec_()
        # See if OK was pressed

    def result(self):
        x1= self.dlg.spO_id1.value()
        #self.lineEdit.text()
        x2= self.dlg.spO_id2.value()
        x3 = self.dlg.spO_id3.value()
        #x1 = self.dlg.spO_id1.value();
        y1= self.dlg.spD_id1.value()
        y2= self.dlg.spD_id2.value()
        y3 = self.dlg.spD_id3.value()
        #start = time.perf_counter()
        XY=[(x1,y1),(x2,y2),(x3,y3)]
        pool = ThreadPool()
        if self.dlg.cbLc.isChecked():
            for x, y in XY:
                o_id, d_id = pool.apply_async(Test_SPP_LC, args=(x, y,)).get()
                Y = pool.apply_async(Pr, args=(o_id,)).get()
            sp1, spnode1 = Test_SPP_LC_1(x1, y1)
            print(writeShp1(sp1, spnode1))
            sp2, spnode2 = Test_SPP_LC_1(x2, y2)
            print(writeShp2(sp2, spnode2))
            sp3, spnode3 = Test_SPP_LC_1(x3, y3)
            print(writeShp3(sp3, spnode3))
        if self.dlg.cbLs.isChecked():
            for x, y in XY:
                o_id, d_id = pool.apply_async(Test_SPP_LS, args=(x, y,)).get()
                Y = pool.apply_async(Pr, args=(o_id,)).get()
            sp4, spnode4 = Test_SPP_LC_1(x1, y1)
            print(writeShp4(sp4, spnode4))
            sp5, spnode5 = Test_SPP_LC_1(x2, y2)
            print(writeShp5(sp5, spnode5))
            sp6, spnode6 = Test_SPP_LC_1(x3, y3)
            print(writeShp6(sp6, spnode6))
        pool.close()
        pool.join()

        # sp, spnode = Test_SPP_CA(23, 8)

       # end = time.perf_counter()
       # print('run time =', end - start)

      # print(spnode)
      # get_length(sp)

        #print(writeShp(sp, spnode))